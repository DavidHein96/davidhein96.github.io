{
  "hash": "5b59b477d66812ae4297c3950a0ceb93",
  "result": {
    "markdown": "---\ntitle: \"My First Paper: Trends and Associations in Rectal Cancer Treatment\"\nauthor: \"Dave Hein\"\ndate: \"2023-06-11\"\ncategories: [R, python, regression, synthetic data, data cleaning]\nimage: \"dalle_impression_chart_brewer.jpg\"\nformat:\n  html: \n    toc: true\n    code-fold: show\n    code-tools: true\n---\n\n```{=html}\n<style type=\"text/css\">\n\ncode.r{\n  font-size: 14px;\n}\ntd {\n  font-size: 12px;\n}\ncode.python{\n  font-size: 14px;\n}\npre {\n  font-size: 12px;\n}\n\n}\n\n</style>\n```\n\n## Project Setup\n\nThis project demonstrates code used in the data cleaning, analysis, and generation of figures in my verfy first publication \"Trends and Factors Associated with Receipt of Upfront Surgery for Stage II-III Rectal Adenocarcinoma in the United States\". Here's a link to the [abstract.](https://pubmed.ncbi.nlm.nih.gov/33710137/) This blog was created with Quarto in R Studio, so to include Python versions of analysis and graphics I needed to specify an Anaconda environment in the setup chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(haven)\nlibrary(lmtest)\nlibrary(glmnet)\nlibrary(nnet)\nlibrary(reticulate)\nlibrary(broom)\nlibrary(rmarkdown)\nlibrary(knitr)\n\nuse_condaenv(\"website_env\", required = TRUE)\nknitr::opts_chunk$set(python.reticulate = FALSE)\n```\n:::\n\n\n## Creating Synthetic Data\n\nThe original paper uses data from the National Cancer Data Base. This data is not public thus I created a synthetic data set that attempts to recreate the characteristics of the original data but with much greater anonymization.\n\n### Clean and Prep Original Data\n\nFirst step was to clean and engineer variables as in the original paper. The source file is retained on a secure server and these code chunks were only ran once (`eval=FALSE`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We will use synthpop to generate a synthetic data set\nlibrary(synthpop)\n\n# Reading in original data from the NCDB\nRectalData <- read_dta(\"ncdb_project_data.dta\")\n\ndf1 <- RectalData %>%\n    select(RX_SUMM_SYSTEMIC_SUR_SEQ, RX_SUMM_RADIATION, RX_SUMM_SURGRAD_SEQ, RX_SUMM_CHEMO,\n        SEX, MED_INC_QUAR_12, AGE, raceb, TNM_CLIN_STAGE_GROUP, TNM_PATH_STAGE_GROUP,\n        SEQUENCE_NUMBER, HISTOLOGY, RX_SUMM_SURG_PRIM_SITE, YEAR_OF_DIAGNOSIS, FACILITY_TYPE_CD,\n        INSURANCE_STATUS, CDCC_TOTAL_BEST, DX_DEFSURG_STARTED_DAYS, CLASS_OF_CASE)\n\n# Remove unknown sequences, treatments, and keep proper hist codes & primary\n# surgery\ndf1 <- df1 %>%\n    filter(!RX_SUMM_SYSTEMIC_SUR_SEQ %in% c(6, 7, 9), !RX_SUMM_RADIATION == 9, !RX_SUMM_SURGRAD_SEQ %in%\n        c(6, 9), !RX_SUMM_CHEMO %in% c(99, 88), SEQUENCE_NUMBER %in% c(\"00\", \"01\"),\n        HISTOLOGY %in% c(8140, 8210, 8260, 8261, 8262, 8263, 8470, 8480, 8481), RX_SUMM_SURG_PRIM_SITE %in%\n            c(30, 40, 50, 60, 70, 80))\n\n# Make a simple stage variable and filter to only stage 2 and 3\ndf1 <- df1 %>%\n    mutate(TNM_CLIN_STAGE_GROUP, stage3 = ifelse(str_detect(TNM_CLIN_STAGE_GROUP,\n        \"2\"), \"2\", \"0\"))\ndf1$stage3[str_detect(df1$TNM_CLIN_STAGE_GROUP, \"3\") == TRUE] <- \"3\"\ndf1 <- df1[!(df1$stage3 == \"0\"), ]\n\n# Define neoadjuvant, rad or chemo before surgery\ndf1 <- df1 %>%\n    mutate(neoadjuvant = 3)\ndf1 <- df1 %>%\n    mutate(neoadjuvant = case_when(RX_SUMM_SURGRAD_SEQ %in% c(2, 4) ~ 1, RX_SUMM_SYSTEMIC_SUR_SEQ %in%\n        c(2, 4) ~ 1, RX_SUMM_RADIATION == 0 & RX_SUMM_CHEMO %in% c(0, 82, 85, 86,\n        87) ~ 0, RX_SUMM_SURGRAD_SEQ == 3 & RX_SUMM_CHEMO %in% c(0, 82, 85, 86, 87) ~\n        0, RX_SUMM_SYSTEMIC_SUR_SEQ == 3 & df1$RX_SUMM_RADIATION == 0 ~ 0, RX_SUMM_SURGRAD_SEQ ==\n        3 & RX_SUMM_SYSTEMIC_SUR_SEQ == 3 ~ 0)) %>%\n    filter(neoadjuvant != 3)\n\n# age group under 45, 45-65, 65 and up AGE\ndf1 <- df1 %>%\n    mutate(agegroup = case_when(AGE <= 45 ~ 0, AGE > 45 & AGE < 65 ~ 1, AGE >= 65 ~\n        2))\n\n# create a var for switching facility and add the unknown gov insurance to\n# unknown insurance\ndf1 <- df1 %>%\n    mutate(CLASS_OF_CASE, treatnotatdiag = ifelse(CLASS_OF_CASE %in% c(0, 20, 21,\n        22), \"Switched\", \"Stayed\"), INSURANCE_STATUS = ifelse(INSURANCE_STATUS ==\n        4, 9, INSURANCE_STATUS))\n\n# Omit NA, this project used complete case analysis\ndf1 <- na.omit(df1)\n\n# Keep only relevant variables\ndf1 <- df1 %>%\n    select(SEX, MED_INC_QUAR_12, agegroup, raceb, stage3, neoadjuvant, treatnotatdiag,\n        YEAR_OF_DIAGNOSIS, FACILITY_TYPE_CD, INSURANCE_STATUS, CDCC_TOTAL_BEST, DX_DEFSURG_STARTED_DAYS)\n\n# Make variables into factors\ndf2 <- mutate(across(!DX_DEFSURG_STARTED_DAYS, as.factor))\n```\n:::\n\n\n### Generate Synthetic Data\n\nI now use the package `synthpop` to create a synthetic data set using bootstrapping and classification and regression trees. I utilized stratification and changed the order of variables used in the synthesis process to create a data set with lower mean square error. Finally I remove all rows that happen to be identical to rows in the original data to ensure every row is synthetic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make synthetic data using CART and bootstrapping\n\n# Reorder for synthetic data generation\ndf3 <- df2 %>%\n    dplyr::relocate(raceb, MED_INC_QUAR_12, neoadjuvant)\n\n# Strat by race and ethnicity and median income for best overlap\nsynth_1 <- syn.strata(df3, proper = TRUE, strata = df2$raceb)\nsynth_2 <- syn.strata(df3, proper = TRUE, strata = df3$MED_INC_QUAR_12)\n\nsynth_dat1 <- synth_1$syn\nsynth_dat2 <- synth_2$syn\n\nvars_i_want <- colnames(df2)\nvars_i_want <- vars_i_want[!vars_i_want == \"DX_DEFSURG_STARTED_DAYS\"]\n\n# Check Heat maps to compare pMSE\nsynthpop::utility.tables(synth_dat1, df3, tables = \"twoway\", vars = vars_i_want)\nsynthpop::utility.tables(synth_dat2, df3, tables = \"twoway\", vars = vars_i_want)\n\n# Remove Replicates & tag for synthetic\nfinal_synth_data <- sdc(synth_2, df3, label = \"synthetic\", rm.replicated.uniques = TRUE)\nf <- final_synth_data$syn\nwrite_tsv(f, \"synthetic_NCDB_data.tsv\")\n```\n:::\n\n\n## Analysis Using Synthetic Data\n\n### Logistic Regression\n\nHere I perform logistic regression using the same variables as the original paper. For fun I put in code for both R and Python. The odds being calculated here are for receipt of neoadjuvant therapy, so the ORs are reversed in comparison to the original paper. \n\n::: panel-tabset\n#### Using R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load synthetic data\nsynthetic_NCDB_data <- read_delim(\"synthetic_NCDB_data.tsv\", delim = \"\\t\", escape_double = FALSE,\n    trim_ws = TRUE)\nsynthetic_NCDB_data <- synthetic_NCDB_data %>%\n    mutate(across(!DX_DEFSURG_STARTED_DAYS, as.factor))\n\n# logistic regression\nlog_fit <- glm(neoadjuvant ~ YEAR_OF_DIAGNOSIS + MED_INC_QUAR_12 + INSURANCE_STATUS +\n    raceb + CDCC_TOTAL_BEST + SEX + agegroup + stage3 + FACILITY_TYPE_CD + treatnotatdiag,\n    data = synthetic_NCDB_data, family = binomial(link = logit))\n\n# Tidy results\ntidy_log_fit <- data.frame(summary(log_fit)$coefficients)\nrmarkdown::paged_table(round(tidy_log_fit %>%\n    mutate(OR = exp(Estimate)) %>%\n    arrange(Pr...z..), 3))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Estimate\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Std..Error\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"z.value\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Pr...z..\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"OR\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.407\",\"2\":\"0.029\",\"3\":\"14.121\",\"4\":\"0.000\",\"5\":\"1.503\",\"_rn_\":\"treatnotatdiagSwitched\"},{\"1\":\"0.350\",\"2\":\"0.028\",\"3\":\"12.359\",\"4\":\"0.000\",\"5\":\"1.418\",\"_rn_\":\"stage33\"},{\"1\":\"1.428\",\"2\":\"0.116\",\"3\":\"12.353\",\"4\":\"0.000\",\"5\":\"4.168\",\"_rn_\":\"(Intercept)\"},{\"1\":\"-0.280\",\"2\":\"0.028\",\"3\":\"-9.893\",\"4\":\"0.000\",\"5\":\"0.756\",\"_rn_\":\"SEX2\"},{\"1\":\"0.682\",\"2\":\"0.073\",\"3\":\"9.325\",\"4\":\"0.000\",\"5\":\"1.977\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2016\"},{\"1\":\"0.504\",\"2\":\"0.058\",\"3\":\"8.725\",\"4\":\"0.000\",\"5\":\"1.655\",\"_rn_\":\"FACILITY_TYPE_CD4\"},{\"1\":\"0.618\",\"2\":\"0.072\",\"3\":\"8.637\",\"4\":\"0.000\",\"5\":\"1.856\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2015\"},{\"1\":\"0.396\",\"2\":\"0.050\",\"3\":\"7.912\",\"4\":\"0.000\",\"5\":\"1.486\",\"_rn_\":\"FACILITY_TYPE_CD3\"},{\"1\":\"0.549\",\"2\":\"0.070\",\"3\":\"7.843\",\"4\":\"0.000\",\"5\":\"1.732\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2014\"},{\"1\":\"0.529\",\"2\":\"0.071\",\"3\":\"7.501\",\"4\":\"0.000\",\"5\":\"1.697\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2013\"},{\"1\":\"-0.531\",\"2\":\"0.072\",\"3\":\"-7.399\",\"4\":\"0.000\",\"5\":\"0.588\",\"_rn_\":\"agegroup2\"},{\"1\":\"0.275\",\"2\":\"0.048\",\"3\":\"5.763\",\"4\":\"0.000\",\"5\":\"1.316\",\"_rn_\":\"FACILITY_TYPE_CD2\"},{\"1\":\"-0.187\",\"2\":\"0.035\",\"3\":\"-5.320\",\"4\":\"0.000\",\"5\":\"0.829\",\"_rn_\":\"CDCC_TOTAL_BEST1\"},{\"1\":\"-0.204\",\"2\":\"0.064\",\"3\":\"-3.219\",\"4\":\"0.001\",\"5\":\"0.815\",\"_rn_\":\"agegroup1\"},{\"1\":\"0.196\",\"2\":\"0.068\",\"3\":\"2.871\",\"4\":\"0.004\",\"5\":\"1.217\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2011\"},{\"1\":\"0.189\",\"2\":\"0.069\",\"3\":\"2.747\",\"4\":\"0.006\",\"5\":\"1.208\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2010\"},{\"1\":\"0.181\",\"2\":\"0.068\",\"3\":\"2.660\",\"4\":\"0.008\",\"5\":\"1.198\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2012\"},{\"1\":\"-0.212\",\"2\":\"0.098\",\"3\":\"-2.155\",\"4\":\"0.031\",\"5\":\"0.809\",\"_rn_\":\"CDCC_TOTAL_BEST3\"},{\"1\":\"-0.141\",\"2\":\"0.071\",\"3\":\"-1.993\",\"4\":\"0.046\",\"5\":\"0.868\",\"_rn_\":\"raceb3\"},{\"1\":\"-0.140\",\"2\":\"0.070\",\"3\":\"-1.992\",\"4\":\"0.046\",\"5\":\"0.869\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2007\"},{\"1\":\"-0.125\",\"2\":\"0.067\",\"3\":\"-1.871\",\"4\":\"0.061\",\"5\":\"0.883\",\"_rn_\":\"CDCC_TOTAL_BEST2\"},{\"1\":\"-0.119\",\"2\":\"0.079\",\"3\":\"-1.498\",\"4\":\"0.134\",\"5\":\"0.888\",\"_rn_\":\"INSURANCE_STATUS3\"},{\"1\":\"-0.100\",\"2\":\"0.068\",\"3\":\"-1.459\",\"4\":\"0.145\",\"5\":\"0.905\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2008\"},{\"1\":\"0.042\",\"2\":\"0.044\",\"3\":\"0.954\",\"4\":\"0.340\",\"5\":\"1.043\",\"_rn_\":\"MED_INC_QUAR_122\"},{\"1\":\"-0.070\",\"2\":\"0.087\",\"3\":\"-0.804\",\"4\":\"0.422\",\"5\":\"0.932\",\"_rn_\":\"INSURANCE_STATUS2\"},{\"1\":\"-0.042\",\"2\":\"0.068\",\"3\":\"-0.627\",\"4\":\"0.531\",\"5\":\"0.959\",\"_rn_\":\"YEAR_OF_DIAGNOSIS2009\"},{\"1\":\"0.030\",\"2\":\"0.052\",\"3\":\"0.568\",\"4\":\"0.570\",\"5\":\"1.030\",\"_rn_\":\"raceb2\"},{\"1\":\"-0.051\",\"2\":\"0.111\",\"3\":\"-0.460\",\"4\":\"0.645\",\"5\":\"0.950\",\"_rn_\":\"INSURANCE_STATUS9\"},{\"1\":\"0.020\",\"2\":\"0.043\",\"3\":\"0.460\",\"4\":\"0.646\",\"5\":\"1.020\",\"_rn_\":\"MED_INC_QUAR_124\"},{\"1\":\"0.010\",\"2\":\"0.044\",\"3\":\"0.228\",\"4\":\"0.820\",\"5\":\"1.010\",\"_rn_\":\"MED_INC_QUAR_123\"},{\"1\":\"-0.002\",\"2\":\"0.132\",\"3\":\"-0.015\",\"4\":\"0.988\",\"5\":\"0.998\",\"_rn_\":\"raceb4\"},{\"1\":\"-0.001\",\"2\":\"0.072\",\"3\":\"-0.013\",\"4\":\"0.990\",\"5\":\"0.999\",\"_rn_\":\"INSURANCE_STATUS1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n#### Using Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.formula.api as smf\n\nsynthetic_NCDB_data_py = pd.read_csv(\"synthetic_NCDB_data.tsv\", sep = '\\t')\n\n# Logistic Regression for odds of upfront surgery\nmodel = smf.logit(formula=\"neoadjuvant~ C(YEAR_OF_DIAGNOSIS) + C(stage3) + C(MED_INC_QUAR_12) + C(INSURANCE_STATUS) + C(raceb) + C(CDCC_TOTAL_BEST) + C(SEX) + C(agegroup) + C(FACILITY_TYPE_CD) + C(treatnotatdiag)\",data = synthetic_NCDB_data_py).fit()\n\nmod_summary = model.summary()\nmod_summary_table = pd.read_html(mod_summary.tables[1].as_html(), header=0, index_col=0)[0]\nprint(mod_summary_table)\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully.\n         Current function value: 0.379420\n         Iterations 6\n                                 coef  std err       z  P>|z|  [0.025  0.975]\nIntercept                      1.4275    0.116  12.353  0.000   1.201   1.654\nC(YEAR_OF_DIAGNOSIS)[T.2007]  -0.1400    0.070  -1.992  0.046  -0.278  -0.002\nC(YEAR_OF_DIAGNOSIS)[T.2008]  -0.0996    0.068  -1.459  0.145  -0.233   0.034\nC(YEAR_OF_DIAGNOSIS)[T.2009]  -0.0424    0.068  -0.627  0.531  -0.175   0.090\nC(YEAR_OF_DIAGNOSIS)[T.2010]   0.1894    0.069   2.747  0.006   0.054   0.325\nC(YEAR_OF_DIAGNOSIS)[T.2011]   0.1960    0.068   2.871  0.004   0.062   0.330\nC(YEAR_OF_DIAGNOSIS)[T.2012]   0.1808    0.068   2.660  0.008   0.048   0.314\nC(YEAR_OF_DIAGNOSIS)[T.2013]   0.5288    0.071   7.501  0.000   0.391   0.667\nC(YEAR_OF_DIAGNOSIS)[T.2014]   0.5490    0.070   7.843  0.000   0.412   0.686\nC(YEAR_OF_DIAGNOSIS)[T.2015]   0.6183    0.072   8.637  0.000   0.478   0.759\nC(YEAR_OF_DIAGNOSIS)[T.2016]   0.6817    0.073   9.325  0.000   0.538   0.825\nC(stage3)[T.3]                 0.3496    0.028  12.359  0.000   0.294   0.405\nC(MED_INC_QUAR_12)[T.2]        0.0421    0.044   0.954  0.340  -0.044   0.129\nC(MED_INC_QUAR_12)[T.3]        0.0099    0.044   0.228  0.820  -0.075   0.095\nC(MED_INC_QUAR_12)[T.4]        0.0199    0.043   0.460  0.646  -0.065   0.105\nC(INSURANCE_STATUS)[T.1]      -0.0009    0.072  -0.013  0.990  -0.142   0.140\nC(INSURANCE_STATUS)[T.2]      -0.0702    0.087  -0.804  0.422  -0.242   0.101\nC(INSURANCE_STATUS)[T.3]      -0.1189    0.079  -1.498  0.134  -0.275   0.037\nC(INSURANCE_STATUS)[T.9]      -0.0509    0.111  -0.460  0.645  -0.268   0.166\nC(raceb)[T.2]                  0.0297    0.052   0.568  0.570  -0.073   0.132\nC(raceb)[T.3]                 -0.1414    0.071  -1.993  0.046  -0.280  -0.002\nC(raceb)[T.4]                 -0.0020    0.132  -0.015  0.988  -0.260   0.256\nC(CDCC_TOTAL_BEST)[T.1]       -0.1870    0.035  -5.320  0.000  -0.256  -0.118\nC(CDCC_TOTAL_BEST)[T.2]       -0.1247    0.067  -1.871  0.061  -0.255   0.006\nC(CDCC_TOTAL_BEST)[T.3]       -0.2123    0.098  -2.155  0.031  -0.405  -0.019\nC(SEX)[T.2]                   -0.2803    0.028  -9.893  0.000  -0.336  -0.225\nC(agegroup)[T.1]              -0.2044    0.064  -3.219  0.001  -0.329  -0.080\nC(agegroup)[T.2]              -0.5308    0.072  -7.399  0.000  -0.671  -0.390\nC(FACILITY_TYPE_CD)[T.2]       0.2747    0.048   5.763  0.000   0.181   0.368\nC(FACILITY_TYPE_CD)[T.3]       0.3958    0.050   7.912  0.000   0.298   0.494\nC(FACILITY_TYPE_CD)[T.4]       0.5036    0.058   8.725  0.000   0.390   0.617\nC(treatnotatdiag)[T.Switched]  0.4072    0.029  14.121  0.000   0.351   0.464\n```\n:::\n:::\n\n:::\n\n### Proportions Over Time\nThis figure shows the proportion of patients receiving neoadjuvant treatment by facility type, and how this proportion has increased over time. There were a lot of issues with getting the Python figure to display correctly, so I had to do a little work around and save the figure before knitting the markdown document. Apologies for the colors not matching in the R and Python versions. There's only so much time in the world...\n\n::: panel-tabset\n#### Using R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Making df of just people who got upfront surg\nsynthetic_NCDB_data2 <- synthetic_NCDB_data %>%\n    mutate(neoadjuvant = as.numeric(neoadjuvant) - 1)\ndf2 <- synthetic_NCDB_data2 %>%\n    filter(neoadjuvant == 0)\n\n# renaming the fac type\ndfyear <- synthetic_NCDB_data2 %>%\n    dplyr::select(YEAR_OF_DIAGNOSIS, neoadjuvant, FACILITY_TYPE_CD)\ndfyear$Facility_Type[dfyear$FACILITY_TYPE_CD == 1] <- \"Community Cancer Program\"\ndfyear$Facility_Type[dfyear$FACILITY_TYPE_CD == 2] <- \"Comprehensive CC Program\"\ndfyear$Facility_Type[dfyear$FACILITY_TYPE_CD == 3] <- \"Academic Program\"\ndfyear$Facility_Type[dfyear$FACILITY_TYPE_CD == 4] <- \"Integrated Network Cancer Program\"\n\n# finding proportion of upfront surg by fac type\ndfyear <- dfyear %>%\n    dplyr::group_by(YEAR_OF_DIAGNOSIS, Facility_Type) %>%\n    dplyr::summarize(ratio = mean(neoadjuvant))\n\n# finding overall median per year of upfront surg\ndfyearavg <- synthetic_NCDB_data2 %>%\n    dplyr::group_by(YEAR_OF_DIAGNOSIS) %>%\n    dplyr::summarize(ratio = mean(neoadjuvant))\ndfyearavg$Facility_Type <- \"Overall Median\"\ndfyearavg <- dfyearavg %>%\n    select(YEAR_OF_DIAGNOSIS, Facility_Type, ratio)\n\n# Merging overall and by facility type\nyear1 <- as.data.frame(dfyear)\nyear2 <- as.data.frame(dfyearavg)\nmergedyearly <- rbind(year1, year2)\nmergedyearly$Facility_Type <- factor(mergedyearly$Facility_Type, levels = c(\"Integrated Network Cancer Program\",\n    \"Academic Program\", \"Overall Median\", \"Comprehensive CC Program\", \"Community Cancer Program\"))\n\n# plotting upfron surg by fac type\nggplot(mergedyearly) + geom_line(data = mergedyearly, aes(x = YEAR_OF_DIAGNOSIS,\n    y = ratio, group = Facility_Type, color = Facility_Type), size = 1.3) + labs(x = \"Year of Diagnosis\",\n    y = \"Proportion Receiving Upfront Surgery\", color = \"Facility Type\") + theme_test() +\n    scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n#### Using Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Graphing proportion receiving upfront surg at different facility types over time\nrcParams['figure.figsize'] = 8,6\n\ndfCC = synthetic_NCDB_data_py.query('FACILITY_TYPE_CD==1').filter(['YEAR_OF_DIAGNOSIS','neoadjuvant']).groupby(['YEAR_OF_DIAGNOSIS']).agg(['mean'])\ndfCCC = synthetic_NCDB_data_py.query('FACILITY_TYPE_CD==2').filter(['YEAR_OF_DIAGNOSIS','neoadjuvant']).groupby(['YEAR_OF_DIAGNOSIS']).agg(['mean'])\ndfA = synthetic_NCDB_data_py.query('FACILITY_TYPE_CD==3').filter(['YEAR_OF_DIAGNOSIS','neoadjuvant']).groupby(['YEAR_OF_DIAGNOSIS']).agg(['mean'])\ndfIN = synthetic_NCDB_data_py.query('FACILITY_TYPE_CD==4').filter(['YEAR_OF_DIAGNOSIS','neoadjuvant']).groupby(['YEAR_OF_DIAGNOSIS']).agg(['mean'])\n\nplt.figure(figsize = (8,6))\n\nplt.plot(dfCC, label=\"Community Cancer Center\")\nplt.plot(dfCCC, label=\"Comprehensive Community Cancer Center\")\nplt.plot(dfA, label=\"Academic Program\")\nplt.plot(dfIN, label=\"Integrated Cancer Program\")\nplt.legend()\nplt.xlabel(\"Year of Diagnosis\")\nplt.ylabel(\"Proportion Receiving Upfront Surgery\")\nplt.savefig('posts/first_project/overtime.png',bbox_inches='tight')\n```\n:::\n\n\n![output](overtime.png)\n:::\n\n### Delays in Surgery and Facility Switching\nThis final figure displays how the counts of patients by how many days they have to wait till surgery, colored by whether they switched facilities or not. \n\n::: panel-tabset\n#### Using R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# making three groups for a surgery delay\ndf2$surggroup[df2$DX_DEFSURG_STARTED_DAYS == 0] <- \"Day zero\"\ndf2$surggroup[df2$DX_DEFSURG_STARTED_DAYS > 0 & df2$DX_DEFSURG_STARTED_DAYS < 28] <- \"Short delay\"\ndf2$surggroup[df2$DX_DEFSURG_STARTED_DAYS >= 28] <- \"Long Delay\"\ndf2$surggroup <- factor(df2$surggroup)\n\n# plotting surg delay and switching facility\nggplot(df2, aes(x = DX_DEFSURG_STARTED_DAYS, fill = treatnotatdiag)) + geom_histogram(binwidth = 5) +\n    xlim(-10, 200) + labs(x = \"Days Untill Surgery From Diagnosis\", y = \"Count\",\n    fill = \"Facility Switch\") + theme_test() + scale_fill_brewer(palette = \"Set2\") +\n    geom_vline(xintercept = 28)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n\n#### Using Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Data frame that only includes people who got upfront surg\ndfsurg = synthetic_NCDB_data_py.query('neoadjuvant == 0')\n\n# Plotting surgery delay and switching facility\ndfsurggraph = dfsurg.filter(['treatnotatdiag','DX_DEFSURG_STARTED_DAYS']).query('DX_DEFSURG_STARTED_DAYS<200')\ndfsurggraphswitch = dfsurggraph.query('treatnotatdiag == \"Switched\"')\ndfsurggraphstay = dfsurggraph.query('treatnotatdiag == \"Stayed\"')\nplt.clf()\nplt.hist(dfsurggraphswitch['DX_DEFSURG_STARTED_DAYS'], bins=40, fill=False,histtype='step',stacked=True,label=\"Switched\",alpha=0.5)\nplt.hist(dfsurggraphstay['DX_DEFSURG_STARTED_DAYS'], bins=40,fill=False,histtype='step',stacked=True,label=\"Stayed\",alpha=0.5)\nplt.xlabel(\"Days Untill Surgery From Diagnosis\")\nplt.ylabel(\"Count\")\nplt.legend()\nplt.axvline(x=28)\nplt.savefig('posts/first_project/switchvstay.png',bbox_inches='tight')\nplt.show()\n```\n:::\n\n\n![output](switchvstay.png)\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}